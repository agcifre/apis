<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2014 sp1 (x64) (http://www.altova.com) by Marc Miezal (Network Research Belgium s.a.) -->
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://bced.wallonie.be/services/PersonServices/messages/v1" xmlns:mes1="http://fsb.belgium.be/getPersonService/messages/v2_00" xmlns:mes2="http://fsb.belgium.be/searchPersonService/messages/v2_00" xmlns:num="http://fsb.belgium.be/data/entity/person/number/v1_00" xmlns:ctx="http://fsb.belgium.be/data/business/context/v1_00" xmlns:bus="http://fsb.belgium.be/data/business/person/v1_00" xmlns:err="http://fsb.belgium.be/data/common/error/v1_00" xmlns:id="http://bced.wallonie.be/common/identification" xmlns:priv="http://bced.wallonie.be/common/privacylog/v2" targetNamespace="http://bced.wallonie.be/services/PersonServices/messages/v1" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.00">
	<import namespace="http://fsb.belgium.be/data/entity/person/number/v1_00" schemaLocation="../../FSB/data/entity/person/number/v1_00/personNumber.xsd"/>
	<import namespace="http://fsb.belgium.be/data/business/person/v1_00" schemaLocation="../../FSB/data/business/person/v1_00/naturalPerson.xsd"/>
	<import namespace="http://fsb.belgium.be/data/business/context/v1_00" schemaLocation="../../FSB/data/business/context/v1_00/context.xsd"/>
	<import namespace="http://fsb.belgium.be/data/common/error/v1_00" schemaLocation="../../FSB/data/common/error/v1_00/error.xsd"/>
	<import namespace="http://fsb.belgium.be/getPersonService/messages/v2_00" schemaLocation="../../FSB/personServices/getPersonServiceMessages_v2_00.xsd"/>
	<import namespace="http://fsb.belgium.be/searchPersonService/messages/v2_00" schemaLocation="../../FSB/personServices/searchPersonServiceMessages_v2_00.xsd"/>
	<import namespace="http://bced.wallonie.be/common/identification" schemaLocation="../data/common/identification_v1.xsd"/>
	<import namespace="http://bced.wallonie.be/common/privacylog/v2" schemaLocation="../data/common/privacy.xsd"/>
	<element name="getPerson" type="tns:GetPersonRequestType"/>
	<element name="searchPersonByName" type="tns:SearchPersonByNameRequestType"/>
	<element name="searchPersonByAddress" type="tns:SearchPersonByAddressType"/>
	<complexType name="SearchPersonByAddressType">
		<annotation>
			<documentation>
				The request requires a mandatory address, and
				optionally the type of persons to search for
				and the page number of
				the result data.
			</documentation>
		</annotation>
		<sequence>
			<element name="CustomerInformations" type="id:ClientIdentification"/>
			<element name="RequestIdentification" type="id:RequestIdentification"/>
			<element name="PrivacyLog" type="priv:PrivacyLog"/>
			<element name="Request">
				<complexType>
					<sequence>
						<element name="address">
							<annotation>
								<documentation>
									The address at which to search the persons. Only Belgian addresses
									can be searched.

									The address must contain a postcode, a streetcode, and a house
									number. The bus number (or
									house number extension) is optional. The address type also requires
									a municipality. This
									should be set to nil; any other value is ignored.

									The house number cannot have more than four digits, which is a
									service-provider limitation.

									For apartment blocks, the house number extension, or bus number,
									generally defines a single
									apartment. Searches with the house number extension filled in yield the
									persons living in
									a single apartment, whereas searches without the extension
									filled in may yield all persons
									living in the whole block.
					</documentation>
							</annotation>
							<complexType>
								<sequence>
									<element name="postcode" type="xs:string"/>
									<element name="streetcode" type="xs:string"/>
									<element name="houseNumber" type="xs:string"/>
									<element name="houseNumberExtension" type="xs:string" minOccurs="0"/>
								</sequence>
							</complexType>
						</element>
						<element name="typeOfPersons" minOccurs="0">
							<annotation>
								<documentation>
									An indicator stating whether all persons living at the specified
									address need to be returned,
									or only those persons who are head of family.
					</documentation>
							</annotation>
							<simpleType>
								<restriction base="xs:string">
									<enumeration value="ALL"/>
									<enumeration value="HEAD_OF_FAMILY"/>
								</restriction>
							</simpleType>
						</element>
						<element name="page" type="xs:nonNegativeInteger" minOccurs="0">
							<annotation>
								<documentation>
									The page number of the search results. Defaults to one.
								</documentation>
							</annotation>
						</element>
					</sequence>
				</complexType>
			</element>
		</sequence>
	</complexType>
	<complexType name="GetPersonRequestType">
		<annotation>
			<documentation>
				The request requires a single person number, which
				can be either a national number or
				a social security number.
			</documentation>
		</annotation>
		<sequence>
			<element name="CustomerInformations" type="id:ClientIdentification"/>
			<element name="RequestIdentification" type="id:RequestIdentification"/>
			<element name="PrivacyLog" type="priv:PrivacyLog"/>
			<element name="Request">
				<complexType>
					<sequence>
						<element name="personNumber" type="num:PersonNumberType"/>
					</sequence>
				</complexType>
			</element>
		</sequence>
	</complexType>
	<complexType name="SearchPersonByNameRequestType">
		<annotation>
			<documentation>
				The request requires a single person number, which
				can be either a national number or
				a social security number.
			</documentation>
		</annotation>
		<sequence>
			<element name="CustomerInformations" type="id:ClientIdentification"/>
			<element name="RequestIdentification" type="id:RequestIdentification"/>
			<element name="PrivacyLog" type="priv:PrivacyLog"/>
			<element name="Request">
				<complexType>
					<sequence>
						<element name="personName" type="tns:personNameType"/>
						<element name="birthDate" type="tns:birthDateType"/>
						<element name="birthDateTolerance" type="xs:nonNegativeInteger" minOccurs="0">
							<annotation>
								<documentation>
									The birth date tolerance is specified in the
									most significant units of the birth date
									that are filled in. For
									example, if the birth date is specified to the day, then the
									tolerance
									is also in days. If the birth date is specified to the month,
									then the tolerance is in months.
									If the birth date is specified
									to the year, then the tolerance is in years.

									Note that for rare names a tolerance in years may work fine, but
									for a very common name the
									tolerance should be set very small.

									If no tolerance is provided, it is set to one, by default.
								</documentation>
							</annotation>
						</element>
						<element name="gender" type="tns:genderType" minOccurs="0"/>
						<element name="nisCode" minOccurs="0">
							<annotation>
								<documentation>
									The NIS code can be specified to search only
									within a specific (Belgian) municipality.
									This must be a
									five-digit number.
								</documentation>
							</annotation>
							<simpleType>
								<restriction base="xs:string">
									<pattern value="\d{5}"/>
								</restriction>
							</simpleType>
						</element>
						<element name="maxReturnData" minOccurs="0">
							<annotation>
								<documentation>
									The maximum number of data to be returned.

									Note that the service provider has a limitation of 30 persons.
									If more persons are found,
									the service provider returns an
									error. 
								</documentation>
							</annotation>
							<simpleType>
								<restriction base="xs:integer">
									<minExclusive value="0"/>
									<maxExclusive value="30"/>
								</restriction>
							</simpleType>
						</element>
					</sequence>
				</complexType>
			</element>
		</sequence>
	</complexType>
	<complexType name="personNameType">
		<annotation>
			<documentation>
				The person name must contain the last name, and may optionally contain
				first names.
					</documentation>
		</annotation>
		<sequence>
			<element name="firstName" type="xs:string" minOccurs="0"/>
			<element name="middleName" type="xs:string" minOccurs="0"/>
			<element name="lastName" type="xs:string"/>
		</sequence>
	</complexType>
	<complexType name="birthDateType">
		<sequence>
			<element name="century">
				<annotation>
					<documentation>
						Century indicator. Valid centuries: 16, 17, 18, 19, 20
								</documentation>
				</annotation>
				<simpleType>
					<restriction base="xs:string">
						<pattern value="16|17|18|19|20"/>
					</restriction>
				</simpleType>
			</element>
			<element name="year">
				<annotation>
					<documentation>
						Year indicator. Valid years: 00, 01, ..., 99
								</documentation>
				</annotation>
				<simpleType>
					<restriction base="xs:string">
						<pattern value="\d\d"/>
					</restriction>
				</simpleType>
			</element>
			<element name="month" minOccurs="0">
				<annotation>
					<documentation>
						Month indicator. Valid months: 00, 01, 02, ..., 12
								</documentation>
				</annotation>
				<simpleType>
					<restriction base="xs:string">
						<pattern value="00|01|02|03|04|05|06|07|08|09|10|11|12"/>
					</restriction>
				</simpleType>
			</element>
			<element name="day" minOccurs="0">
				<annotation>
					<documentation>
						Day of the month indicator. Valid days: 00, 01, 02, ..., 31
					</documentation>
				</annotation>
				<simpleType>
					<restriction base="xs:string">
						<pattern value="[012]\d|30|31"/>
					</restriction>
				</simpleType>
			</element>
		</sequence>
	</complexType>
	<simpleType name="genderType">
		<annotation>
			<documentation>
				The gender specification allows searches to be limited to either males
				or females.
					</documentation>
		</annotation>
		<restriction base="xs:string">
			<enumeration value="MALE"/>
			<enumeration value="FEMALE"/>
		</restriction>
	</simpleType>
</schema>
