<?xml version="1.0" encoding="UTF-8"?>
<!-- 2021-12-28 : PHI : Ajout des exposed DataGroup CadasterAddress_EDGv1 CadasterCommunity_EDGv1 CadasterHistoricalSite_EDGv1 CadasterParcel_EDGv1 CadasterProperty_EDGv1 CadasterStreet_EDGv1 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" xmlns:filter="http://soa.spw.wallonie.be/tools/filter/v1" targetNamespace="http://soa.spw.wallonie.be/tools/filter/v1" elementFormDefault="unqualified" attributeFormDefault="unqualified" vc:minVersion="1.1">
	<!--
- Filters MUST be whitelists and not blacklists
- All FilterTag elements MUST be 'required'
- Each authorized element MUST have one FilterTag with action "authorize"
- Each authorized element MAY have additional treatments applied
- FilterTag with action "authorize" MUST be declared before additional treatments on the concerned authorized element
- "authorize" action and additional treatments of the same authorized element SHOULD be grouped
- Treatments SHOULD be applied in the order defined in the XSD
- FilterTag which apply specific treatments SHOULD start with the authorized element name and end with the treatment type
- Several treatments MAY be applied on a single authorized element
- RESPONSE Filters with "authorize" action MUST lead to a filtered business response
- REQUEST Filters with "authorize" action MUST lead to an error response
-->
	<!-- 
         ################################
         ###      Filters Root Element          ###
         ################################ -->
	<!-- 
			Add one line per exposedDataGroup here
            Warning: We cannot have 2 alternatives using the same type "filter:Xyz" (Demon limitation)
	-->
	<xs:element name="filters" type="filter:FiltersType">
		<xs:alternative test="@exposedDataGroup = 'AER_EDGv1'" type="filter:AER_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'BankAccount_EDGv1'" type="filter:BankAccount_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'Cadaster_EDGv1'" type="filter:Cadaster_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'CadasterAddress_EDGv1'" type="filter:CadasterAddress_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'CadasterCommunity_EDGv1'" type="filter:CadasterCommunity_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'CadasterHistoricalSite_EDGv1'" type="filter:CadasterHistoricalSite_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'CadasterParcel_EDGv1'" type="filter:CadasterParcel_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'CadasterProperty_EDGv1'" type="filter:CadasterProperty_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'CadasterStreet_EDGv1'" type="filter:CadasterStreet_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'DisabledPerson_EDGv1'" type="filter:DisabledPerson_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'DisabledPerson_EDGv2'" type="filter:DisabledPerson_EDGv2"/>
		<xs:alternative test="@exposedDataGroup = 'DMFA_EDGv1'" type="filter:DMFA_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'EmployerRegister_EDGv1'" type="filter:EmployerRegister_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'EmploymentContract_EDGv1'" type="filter:EmploymentContract_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'Enterprise_EDGv1'" type="filter:Enterprise_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'FamilyAllowances_EDGv1'" type="filter:FamilyAllowances_EDGv1"/>
		<!-- <xs:alternative test="@exposedDataGroup = 'Filiation_EDGv1'" type="filter:Filiation_EDGv1"/> -->
		<xs:alternative test="@exposedDataGroup = 'Household_EDGv1'" type="filter:Household_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'Identity_EDGv1'" type="filter:Identity_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'MobilityRegistration_EDGv1'" type="filter:MobilityRegistration_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'MobilityRegistrationsHistory_EDGv1'" type="filter:MobilityRegistrationsHistory_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'MovementIndication_EDGv1'" type="filter:MovementIndication_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'Person_EDGv1'" type="filter:Person_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'PersonSearch_EDGv1'" type="filter:PersonSearch_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'PersonHistory_EDGv1'" type="filter:PersonHistory_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'SelfEmployed_EDGv1'" type="filter:SelfEmployed_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'Vehicle_EDGv1'" type="filter:Vehicle_EDGv1"/>
		<!-- Samples -->
		<xs:alternative test="@exposedDataGroup = 'ComplexExample_EDGv1'" type="filter:ComplexExample_EDGv1"/>
		<xs:alternative test="@exposedDataGroup = 'ComplexExample_EDGv2'" type="filter:ComplexExample_EDGv2"/>
		<xs:alternative test="@exposedDataGroup = 'ComplexExample_EDGv3'" type="filter:ComplexExample_EDGv3"/>
		<!-- The xs:unique forbids the repetition of a filter block -->
		<xs:unique name="UniqueFilter">
			<xs:selector xpath=".//filter"/>
			<xs:field xpath="@type"/>
			<xs:field xpath="@targetDataGroup"/>
		</xs:unique>
	</xs:element>
	<!--  
         ######################################
         ###      ExposedDataGroup definitions      ###
         ###################################### -->
	<!-- 
			This is here that you declare the filter blocs that compose one "filters" for an ExposedDataGroup.
	-->
	<!-- 
       =================
	   ==    AER_EDGv1   ==
       ================= -->
	<xs:complexType name="AER_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='AER'" type="filter:AERRequestFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =======================
	   ==    BankAccount_EDGv1   ==
       ======================= -->
	<xs:complexType name="BankAccount_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='BankAccount'" type="filter:BankAccountRequestFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ====================
	   ==    Cadaster_EDGv1   ==
       ==================== -->
	<xs:complexType name="Cadaster_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Cadaster'" type="filter:CadasterResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==========================
	   ==    CadasterAddress_EDGv1   ==
       ========================== -->
	<xs:complexType name="CadasterAddress_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Cadaster'" type="filter:CadasterAddressResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    CadasterCommunity_EDGv1   ==
       ============================ -->
	<xs:complexType name="CadasterCommunity_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Cadaster'" type="filter:CadasterCommunityResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    CadasterHistoricalSite_EDGv1   ==
       ============================ -->
	<xs:complexType name="CadasterHistoricalSite_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Cadaster'" type="filter:CadasterHistoricalSiteResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    CadasterParcel_EDGv1   ==
       ============================ -->
	<xs:complexType name="CadasterParcel_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Cadaster'" type="filter:CadasterParcelResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    CadasterProperty_EDGv1   ==
       ============================ -->
	<xs:complexType name="CadasterProperty_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Cadaster'" type="filter:CadasterPropertyResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    CadasterStreet_EDGv1   ==
       ============================ -->
	<xs:complexType name="CadasterStreet_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Cadaster'" type="filter:CadasterStreetResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =========================
	   ==    DisabledPerson_EDGv1   ==
       ========================= -->
	<xs:complexType name="DisabledPerson_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='DisabledPerson'" type="filter:DisabledPersonResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =========================
	   ==    DisabledPerson_EDGv2   ==
       ========================= -->
	<xs:complexType name="DisabledPerson_EDGv2">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<!-- ESB-2209 Retrait de la partie REQUEST des filtres DisabledPerson_EDGv2 -->
						<!--xs:alternative test="@type = 'REQUEST' and @targetDataGroup='DisabledPerson'" type="filter:DisabledPersonRequestFilterTypeV1"/-->
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='DisabledPerson'" type="filter:DisabledPersonResponseFilterTypeV2"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==================
	   ==    DMFA_EDGv1   ==
       ================== -->
	<xs:complexType name="DMFA_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="2" maxOccurs="2">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='DMFA'" type="filter:DMFARequestFilterTypeV1"/>
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='DMFA'" type="filter:DMFAResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================
	   ==    EmployerRegister_EDGv1    ==
       =================== -->
	<xs:complexType name="EmployerRegister_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='EmployerRegister'" type="filter:EmployerRegisterResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =============================
	   ==    EmploymentContract_EDGv1   ==
       ============================= -->
	<xs:complexType name="EmploymentContract_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="2" maxOccurs="2">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='EmploymentContract'" type="filter:EmploymentContractRequestFilterTypeV1"/>
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='EmploymentContract'" type="filter:EmploymentContractResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =====================
	   ==    Enterprise_EDGv1   ==
       ===================== -->
	<xs:complexType name="Enterprise_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Enterprise'" type="filter:EnterpriseResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===========================
	   ==    FamilyAllowances_EDGv1    ==
       =========================== -->
	<xs:complexType name="FamilyAllowances_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="2" maxOccurs="2">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='FamilyAllowances'" type="filter:FamilyAllowancesRequestFilterTypeV1"/>
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Person'" type="filter:PersonResponseFilterTypeV2"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================
	   ==    Filiation_EDGv1   ==
       =================== -->
	<!--
	<xs:complexType name="Filiation_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Filiation'" type="filter:FiliationResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	-->
	<!-- 
       =====================
	   ==    Household_EDGv1   ==
       ===================== -->
	<xs:complexType name="Household_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='Household'" type="filter:HouseholdRequestFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================
	   ==    Identity_EDGv1   ==
       =================== -->
	<xs:complexType name="Identity_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='Identity'" type="filter:IdentityRequestFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    MobilityRegistration_EDGv1   ==
       ============================ -->
	<xs:complexType name="MobilityRegistration_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='MobilityRegistration'" type="filter:MobilityRegistrationResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =================================
	   ==    MobilityRegistrationsHistory_EDGv1   ==
       ================================= -->
	<xs:complexType name="MobilityRegistrationsHistory_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='MobilityRegistrationsHistory'" type="filter:MobilityRegistrationsHistoryResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    MovementIndication_EDGv1   ==
       ============================ -->
	<xs:complexType name="MovementIndication_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='MovementIndication'" type="filter:MovementIndicationResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================
	   ==    Person_EDGv1    ==
       =================== -->
	<xs:complexType name="Person_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Person'" type="filter:PersonResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================
	   ==    PersonSearch_EDGv1    ==
       =================== -->
	<xs:complexType name="PersonSearch_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Person'" type="filter:PersonResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================
	   ==    PersonHistory_EDGv1    ==
       =================== -->
	<xs:complexType name="PersonHistory_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='PersonHistory'" type="filter:PersonHistoryResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =======================
	   ==    SelfEmployed_EDGv1   ==
       ======================= -->
	<xs:complexType name="SelfEmployed_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='SelfEmployed'" type="filter:SelfEmployedResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================
	   ==    Vehicle_EDGv1   ==
       =================== -->
	<xs:complexType name="Vehicle_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Vehicle'" type="filter:VehicleResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==========================
	   ==    ComplexExample_EDGv1   ==
       ========================== -->
	<xs:complexType name="ComplexExample_EDGv1">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="4" maxOccurs="4">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='BankAccount'" type="filter:BankAccountRequestFilterTypeV1"/>
						<xs:alternative test="@type = 'REQUEST' and @targetDataGroup='Household'" type="filter:HouseholdRequestFilterTypeV1"/>
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Vegetables'" type="filter:ExampleResponseFilterTypeV1"/>
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Vehicle'" type="filter:VehicleResponseFilterTypeV1"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==========================
	   ==    ComplexExample_EDGv2   ==
       ========================== -->
	<xs:complexType name="ComplexExample_EDGv2">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Vegetables'" type="filter:ExampleResponseFilterTypeV2"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==========================
	   ==    ComplexExample_EDGv3   ==
       ========================== -->
	<xs:complexType name="ComplexExample_EDGv3">
		<xs:complexContent>
			<xs:extension base="filter:FiltersType">
				<xs:sequence minOccurs="1" maxOccurs="1">
					<xs:element name="filter" type="filter:FilterType">
						<xs:alternative test="@type = 'RESPONSE' and @targetDataGroup='Vegetables'" type="filter:ExampleResponseFilterTypeV2"/>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--  
         ########################################
         ###      REQUEST Filter Type definitions      ###
         ######################################## -->
	<!-- 
			This is here that you declare the content of REQUEST filter blocs
            NOTE: One RequestFilterType MAY be used by several ExposedDataGroup !!! Be careful when you change an existing one !!!
	-->
	<!-- 
       ==========================
	   ==    AERRequestFilterTypeV1   ==
       ========================== -->
	<xs:complexType name="AERRequestFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="code" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>Code IPCAL. 
Un code IPCAL est une suite de chiffre, sans espace.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:value_authorize">
									<xs:pattern value="\d+"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ================================
	   ==    BankAccountRequestFilterTypeV1   ==
       ================================ -->
	<xs:complexType name="BankAccountRequestFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="bankAccount" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>Compte bancaire belge au format IBAN ou ALL pour permettre les requêtes sur tous les comptes.
ex: BE65091215036396.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:value_authorize">
									<xs:pattern value="(BE\d{14}|ALL)"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    DMFARequestFilterTypeV1   ==
       ============================ -->
	<xs:complexType name="DMFARequestFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="historicalPeriodRestriction" type="filter:duration_restrict"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ======================================
	   ==    EmploymentContractRequestFilterTypeV1   ==
       ====================================== -->
    <!-- ESB-2209 Ces tagFilter ont été enlevés -->
	<!--xs:complexType name="DisabledPersonRequestFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="AVIQ" type="filter:boolean_authorize"/>
					<xs:element name="DSL" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType-->
	<!-- 
       ======================================
	   ==    EmploymentContractRequestFilterTypeV1   ==
       ====================================== -->
	<xs:complexType name="EmploymentContractRequestFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="personNumber" type="filter:boolean_authorize"/>
					<xs:element name="enterpriseNumber" type="filter:boolean_authorize"/>
					<xs:element name="workerCategories">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="workerCategory" minOccurs="0" maxOccurs="unbounded">
									<xs:annotation>
										<xs:documentation>Type de travailleur
Liste non exhaustive des valeurs possibles :
- BCW: Build and Construction Worker
- EXT: extra worker
- IVT: Individual vocational training
- RTA: Registered trainees or assimilated
- STU: Student
- STX: student extra
- TEA: Teacher
- DWD: Dimona without DmfA
- TRI: Transition internship
- OTH: Other
- …</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:simpleContent>
											<xs:restriction base="filter:value_authorize">
												<xs:pattern value="\S+"/>
											</xs:restriction>
										</xs:simpleContent>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ====================================
	   ==    FamilyAllowancesRequestFilterTypeV1   ==
       ==================================== -->
	<xs:complexType name="FamilyAllowancesRequestFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="consolidationMax" type="filter:number_restrict">
						<xs:annotation>
							<xs:documentation>La valeur devrait être 10 par défaut lors de la création d'un filtre. Elle sera modifiée au besoin par le PI.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==============================
	   ==    HouseholdRequestFilterTypeV1   ==
       ============================== -->
	<xs:complexType name="HouseholdRequestFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="personNumber" type="filter:boolean_authorize" fixed="true"/>
					<xs:element name="referenceDate" type="filter:boolean_authorize"/>
					<!-- true if historical situation is allowed implies provider operation BySsinAndDate-->
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    IdentityRequestFilterTypeV1   ==
       ============================ -->
	<xs:complexType name="IdentityRequestFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="publicOrganisation">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="category" type="filter:value_authorize"/>
								<xs:element name="prefix" type="filter:value_authorize"/>
								<xs:element name="ou" type="filter:value_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
         #########################################
         ###      RESPONSE Filter Type definitions      ###
         ######################################### -->
	<!-- 
			This is here that you declare the content of RESPONSE filter blocs
            NOTE: One ResponseFilterType MAY be used by several ExposedDataGroup !!! Be careful when you change an existing one !!!
	-->
	<!-- 
       ==============================
	   ==    CadasterResponseFilterTypeV1   ==
       ============================== -->
	<xs:complexType name="CadasterResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="parcelSituation" type="filter:boolean_authorize"/>
					<xs:element name="parcelIdentification" type="filter:boolean_authorize"/>
					<xs:element name="parcelDescription" type="filter:boolean_authorize"/>
					<xs:element name="cadastralIncome" type="filter:boolean_authorize"/>
					<xs:element name="parcelLocation" type="filter:boolean_authorize"/>
					<xs:element name="propertyOwners" type="filter:boolean_authorize"/>
					<xs:element name="propertyStatus" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==============================
	   ==    CadasterAddressResponseFilterTypeV1   ==
       ============================== -->
	<xs:complexType name="CadasterAddressResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="addressParty.bisNumber" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.busNumber" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.dateBegin" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.dateBeginYear" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.dateEnd" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.dateEndYear" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.descriptGeneral" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.descriptPrivate" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.detail" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.divCad.code" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.divCad.description" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.exponentLetter" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.exponentNumber" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.houseNumber" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.houseNumberTri" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.nature.code" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.nature.description" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.nisCom.code" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.nisCom.description" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.partNumber" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.primaryNumber" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.section" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.street.code" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.street.description" type="filter:boolean_authorize"/>
					<xs:element name="addressParty.zipCode" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =======================================
	   ==    CadasterCommunityResponseFilterTypeV1   ==
       ======================================= -->
	<xs:complexType name="CadasterCommunityResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="community.nisCom.code" type="filter:boolean_authorize"/>
					<xs:element name="community.nisCom.description" type="filter:boolean_authorize"/>
					<xs:element name="community.zipCode" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =======================================
	   ==    CadasterHistoricalSiteResponseFilterTypeV1   ==
       ======================================= -->
	<xs:complexType name="CadasterHistoricalSiteResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="sitHistorical.nextPropertySituation.article" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dateBegin" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dateBeginYear" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dateEnd" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dateEndYear" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.detailApp" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dossier.causeMutation" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dossier.dateRealLife" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dossier.dateValidationDossier" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dossier.dossierNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dossier.dossierType.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dossier.dossierType.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dossier.schets" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.dossier.yearRealLife" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.expiredDate" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.flag-expired" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.flag-intermediate" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.no-parcel" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelCadStatus.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelCadStatus.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.bisNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.divCad.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.divCad.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.exponentLetter" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.exponentNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.fractionDenominator" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.partNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.precad" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.primaryNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.parcelIdentification.section" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.propertySituationIdf" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.sequenceNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.nextPropertySituation.sitHistoricalIdf" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.article" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dateBegin" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dateBeginYear" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dateEnd" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dateEndYear" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.detailApp" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dossier.causeMutation" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dossier.dateRealLife" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dossier.dateValidationDossier" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dossier.dossierNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dossier.dossierType.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dossier.dossierType.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dossier.schets" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.dossier.yearRealLife" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.expiredDate" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.flag-expired" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.flag-intermediate" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.no-parcel" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelCadStatus.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelCadStatus.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.bisNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.divCad.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.divCad.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.exponentLetter" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.exponentNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.fractionDenominator" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.partNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.precad" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.primaryNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.parcelIdentification.section" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.propertySituationIdf" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.sequenceNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.previousPropertySituation.sitHistoricalIdf" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.article" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dateBegin" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dateBeginYear" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dateEnd" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dateEndYear" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.detailApp" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dossier.causeMutation" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dossier.dateRealLife" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dossier.dateValidationDossier" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dossier.dossierNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dossier.dossierType.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dossier.dossierType.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dossier.schets" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.dossier.yearRealLife" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.expiredDate" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.flag-expired" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.flag-intermediate" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.no-parcel" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelCadStatus.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelCadStatus.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.bisNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.divCad.code" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.divCad.description" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.exponentLetter" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.exponentNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.fractionDenominator" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.partNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.precad" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.primaryNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.parcelIdentification.section" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.propertySituationIdf" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.sequenceNumber" type="filter:boolean_authorize"/>
					<xs:element name="sitHistorical.searchedPropertySituation.sitHistoricalIdf" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =======================================
	   ==    CadasterParcelResponseFilterTypeV1   ==
       ======================================= -->
	<xs:complexType name="CadasterParcelResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="parcel.bisNumber" type="filter:boolean_authorize"/>
					<xs:element name="parcel.busNumber" type="filter:boolean_authorize"/>
					<xs:element name="parcel.dateBegin" type="filter:boolean_authorize"/>
					<xs:element name="parcel.dateBeginYear" type="filter:boolean_authorize"/>
					<xs:element name="parcel.dateEnd" type="filter:boolean_authorize"/>
					<xs:element name="parcel.dateEndYear" type="filter:boolean_authorize"/>
					<xs:element name="parcel.descriptGeneral" type="filter:boolean_authorize"/>
					<xs:element name="parcel.descriptPrivate" type="filter:boolean_authorize"/>
					<xs:element name="parcel.detail" type="filter:boolean_authorize"/>
					<xs:element name="parcel.divCad.code" type="filter:boolean_authorize"/>
					<xs:element name="parcel.divCad.description" type="filter:boolean_authorize"/>
					<xs:element name="parcel.exponentLetter" type="filter:boolean_authorize"/>
					<xs:element name="parcel.exponentNumber" type="filter:boolean_authorize"/>
					<xs:element name="parcel.houseNumber" type="filter:boolean_authorize"/>
					<xs:element name="parcel.houseNumberTri" type="filter:boolean_authorize"/>
					<xs:element name="parcel.nature.code" type="filter:boolean_authorize"/>
					<xs:element name="parcel.nature.description" type="filter:boolean_authorize"/>
					<xs:element name="parcel.nisCom.code" type="filter:boolean_authorize"/>
					<xs:element name="parcel.nisCom.description" type="filter:boolean_authorize"/>
					<xs:element name="parcel.partNumber" type="filter:boolean_authorize"/>
					<xs:element name="parcel.primaryNumber" type="filter:boolean_authorize"/>
					<xs:element name="parcel.section" type="filter:boolean_authorize"/>
					<xs:element name="parcel.street.code" type="filter:boolean_authorize"/>
					<xs:element name="parcel.street.description" type="filter:boolean_authorize"/>
					<xs:element name="parcel.zipCode" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =======================================
	   ==    CadasterPropertyResponseFilterTypeV1   ==
       ======================================= -->
	<xs:complexType name="CadasterPropertyResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="enterprises.enterprise.address.addressId" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.boxNumber" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.coordinates.altitude" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.coordinates.latitude" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.coordinates.longitude" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.country.code" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.country.description" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.houseNumber" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.municipality.code" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.municipality.description" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.partofMunicipality.code" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.partofMunicipality.description" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.plainText" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.postCode.code" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.postCode.description" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.state" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.street.code" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.address.street.description" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.enterpriseNumber" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.name" type="filter:boolean_authorize"/>
					<xs:element name="enterprises.enterprise.persIdf" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.addressId" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.boxNumber" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.coordinates.altitude" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.coordinates.latitude" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.coordinates.longitude" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.country.code" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.country.description" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.houseNumber" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.municipality.code" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.municipality.description" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.partofMunicipality.code" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.partofMunicipality.description" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.plainText" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.postCode.code" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.postCode.description" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.state" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.street.code" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.addresses.address.street.description" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.birthDate" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.firstName" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.id" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.lastName" type="filter:boolean_authorize"/>
					<xs:element name="persons.person.personNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.amountElevator" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.bassin" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.beginVersion" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.acteDescription" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.addressId" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.boxNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.coordinates.altitude" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.coordinates.latitude" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.coordinates.longitude" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.country.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.country.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.houseNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.municipality.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.municipality.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.partofMunicipality.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.partofMunicipality.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.plainText" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.postCode.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.postCode.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.state" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.street.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.addressState.street.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.airco.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.airco.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.basementNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.bathroomNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.bedroomNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.block" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.builtSurface" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.centralHeating" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.constructionIndication.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.constructionIndication.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.constructionQuality.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.constructionQuality.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.constructionType.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.constructionType.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.constructionYear.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.constructionYear.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.coveredParkingLotNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.crossDetail" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.denom" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.descriptionDescr.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.descriptionDescr.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.detail" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.domotica.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.domotica.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.floor" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.floorFrom" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.floorNumberAboveground" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.floorNumberUndergrond" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.floorSituation.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.floorSituation.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.floorSurface" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.floorTo" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.garageNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.garret" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.housingUnitNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.liftNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.mainCommon" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.otherNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.percentSurfaceHeated" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.physModYear" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.placeNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.pool.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.pool.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.purCommon" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.purMain" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.purNature.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.purNature.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.purNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.purType.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.purType.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.renovSurface" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.renovType.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.renovType.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.renovYear" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.solarPanel" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.terraceNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.text" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.totalsurface" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.usedSurface" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.yearFrom" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.built.yearTo" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.dateBegin" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.dateBeginYear" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.dateEnd" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.dateEndYear" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.dateEpc" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.descriptGeneral" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.descriptPrivate" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.detail" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.dhm.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.dhm.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.endVersion" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.energyCertificate.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.energyCertificate.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.energyHouse" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.isolationHouse" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.matUtil" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.maxThermCoef" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.nature.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.nature.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notBuilt.location" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notBuilt.mainCommon" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notBuilt.purCommon" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notBuilt.purIdf" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notBuilt.purNature.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notBuilt.purNature.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notBuilt.purType.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notBuilt.purType.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.notTaxedMatUtil" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelCadStatus.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelCadStatus.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.bisNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.divCad.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.divCad.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.exponentLetter" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.exponentNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.fractionDenominator" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.partNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.precad" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.primaryNumber" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelIdentification.section" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.cadastralIncome" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.cadastralIncomeMotif" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.charCadastralIncome.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.charCadastralIncome.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.dateDefinitiveIncome" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.dateEndExoneration" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.dateFirstUse" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.dateNotification" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.decrete.cadastralIncomeDecrete.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.decrete.cadastralIncomeDecrete.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.motivNotif1.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.motivNotif1.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.motivNotif2.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.motivNotif2.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.motivNotif3.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.motivNotif3.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.notificationStatus.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.notificationStatus.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.numberCadastralIncome.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncome.numberCadastralIncome.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.cadastralIncomePerSurface" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.nisCom.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.nisCom.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.notAppl" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.number" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.order" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.polWa.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.polWa.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.soilIndex.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.soilIndex.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.soilRent.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.soilRent.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.surfaceNotTaxable" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.surfaceTaxable" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.surfaceVerif.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.surfaceVerif.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.versionPurId" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.xCoordinate" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelInformation.yCoordinate" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelWidthMain" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.parcelWidthStreet" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.passiveHouse" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.rootput" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.settlingBasin" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.sketch" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.threshold" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.util.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.parcelState.util.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.right" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.complexRightDescription" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.expiredDate" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.expiredYear" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.fractDenom" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.fractEnom" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.part" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.partSurface" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.rightType.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.rightType.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.businessRight.rightElement.surface" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.concessionHolder" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.managedBy" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.party.partyAnonymous.anonymousOwner" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.party.partyAssociation.persIdf" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.party.partyBusiness.persIdf" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.party.partyCommunity.persIdf" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.party.partyCommunity.persIdf" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.party.partyIndividual.persIdf" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.partyCoOwner.coOwner" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.partyInfo.partyType.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.party.partyInfo.partyType.description" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.artLastInsParcel" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.artLastInsParcelAv" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.beginVersion" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.calculatedMarketValue" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.calculatedMaxMarketValue" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.calculatedMinMarketValue" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.cancelVersion" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.dateBegin" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.dateBeginYear" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.dateCalculatedMarketValue" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.dateEnd" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.dateEndYear" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.dateJurBegin" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.dateJurEnd" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.doubtfulRight" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.endVersion" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.propertySituationIdf" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.propertySituationIdfNext" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.propertySituationIdfPrevious" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.propSit.code" type="filter:boolean_authorize"/>
					<xs:element name="properties.property.propertyStateInfo.propSit.description" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =======================================
	   ==    CadasterStreetResponseFilterTypeV1   ==
       ======================================= -->
	<xs:complexType name="CadasterStreetResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="streets.nisCom.code" type="filter:boolean_authorize"/>
					<xs:element name="streets.nisCom.description" type="filter:boolean_authorize"/>
					<xs:element name="streets.street.code" type="filter:boolean_authorize"/>
					<xs:element name="streets.street.description" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================================
	   ==    DisabledPersonResponseFilterTypeV1   ==
       =================================== -->
	<xs:complexType name="DisabledPersonResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="evolutionOfRequest" type="filter:boolean_authorize"/>
					<xs:element name="handicapRecognition" type="filter:boolean_authorize"/>
					<xs:element name="rights" type="filter:boolean_authorize"/>
					<xs:element name="socialCards" type="filter:boolean_authorize"/>
					<xs:element name="payments" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================================
	   ==    DisabledPersonResponseFilterTypeV2   ==
       =================================== -->
	<xs:complexType name="DisabledPersonResponseFilterTypeV2">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="evolutionOfRequest" type="filter:boolean_authorize"/>
					<xs:element name="handicapRecognition" type="filter:boolean_authorize"/>
					<xs:element name="rights" type="filter:boolean_authorize"/>
					<xs:element name="socialCards" type="filter:boolean_authorize"/>
					<xs:element name="payments" type="filter:boolean_authorize"/>
					<xs:element name="addressHandicappedPerson" type="filter:boolean_authorize"/>
					<xs:element name="recognitionStatus" type="filter:boolean_authorize"/>
					<xs:element name="resultRecognitionChild" type="filter:boolean_authorize"/>
					<xs:element name="inabilityFollowCourse" type="filter:boolean_authorize"/>
					<xs:element name="inabilityToWork" type="filter:boolean_authorize"/>
					<xs:element name="disabilityCode" type="filter:boolean_authorize"/>
					<xs:element name="independencyScore" type="filter:boolean_authorize"/>
					<xs:element name="pillars" type="filter:boolean_authorize"/>
					<xs:element name="pillar1" type="filter:boolean_authorize"/>
					<xs:element name="pillar2" type="filter:boolean_authorize"/>
					<xs:element name="pillar3" type="filter:boolean_authorize"/>
					<xs:element name="pillarsTotal" type="filter:boolean_authorize"/>
					<xs:element name="childPathology" type="filter:boolean_authorize"/>
					<xs:element name="resultRecognitionAdult" type="filter:boolean_authorize"/>
					<xs:element name="mobility" type="filter:boolean_authorize"/>
					<xs:element name="nourishment" type="filter:boolean_authorize"/>
					<xs:element name="hygiene" type="filter:boolean_authorize"/>
					<xs:element name="household" type="filter:boolean_authorize"/>
					<xs:element name="supervision" type="filter:boolean_authorize"/>
					<xs:element name="socialSkills" type="filter:boolean_authorize"/>
					<xs:element name="totalPoints" type="filter:boolean_authorize"/>
					<xs:element name="diminuationEarnings" type="filter:boolean_authorize"/>
					<xs:element name="unsuitability" type="filter:boolean_authorize"/>
					<xs:element name="mentalUnsuitability" type="filter:boolean_authorize"/>
					<xs:element name="physicalUnsuitability" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ============================
	   ==    DMFAResponseFilterTypeV1   ==
       ============================ -->
	<xs:complexType name="DMFAResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="attEmployerDeclaration" type="filter:boolean_authorize"/>
					<xs:element name="attJustification" type="filter:boolean_authorize"/>
					<xs:element name="attNaturalPerson" type="filter:boolean_authorize"/>
					<xs:element name="personNumber" type="filter:boolean_authorize"/>
					<xs:element name="cryptPersonNumber" type="filter:boolean_authorize"/>
					<xs:element name="attWorkerRecord" type="filter:boolean_authorize"/>
					<xs:element name="attWorkerRecordAttJustification" type="filter:boolean_authorize"/>
					<xs:element name="attOccupations" type="filter:boolean_authorize"/>
					<xs:element name="attOccupationInformation" type="filter:boolean_authorize"/>
					<xs:element name="attServices" type="filter:boolean_authorize"/>
					<xs:element name="attRemuns" type="filter:boolean_authorize"/>
					<xs:element name="attReorgMeasureInformation" type="filter:boolean_authorize"/>
					<xs:element name="attOccupationDeductions" type="filter:boolean_authorize"/>
					<xs:element name="attOccupationDeductionDetails" type="filter:boolean_authorize"/>
					<xs:element name="attWorkerContributions" type="filter:boolean_authorize"/>
					<xs:element name="attWorkerDeductions" type="filter:boolean_authorize"/>
					<xs:element name="attDeductionDetails" type="filter:boolean_authorize"/>
					<xs:element name="attDismissedStatutoryWorkerContribution" type="filter:boolean_authorize"/>
					<xs:element name="attStudentContribution" type="filter:boolean_authorize"/>
					<xs:element name="attEarlyRetirementContributions" type="filter:boolean_authorize"/>
					<xs:element name="attIndemnityWapms" type="filter:boolean_authorize"/>
					<xs:element name="attAnomalies" type="filter:boolean_authorize"/>
					<xs:element name="anonymization" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===================================
	   ==    EmployerRegisterResponseFilterTypeV1   ==
       =================================== -->
	<xs:complexType name="EmployerRegisterResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="employerCategories" type="filter:boolean_authorize"/>
					<xs:element name="kindOfEmployer" type="filter:boolean_authorize"/>
					<xs:element name="realEstateSectorCode" type="filter:boolean_authorize"/>
					<xs:element name="serviceProvider" type="filter:boolean_authorize"/>
					<xs:element name="serviceProviderRestriction">
						<xs:annotation>
							<xs:documentation>Le bloc employerRegister ne sera retourné que s'il son serviceProvider est du type repris dans la liste.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_restrict">
									<xs:enumeration value=""/>
									<xs:enumeration value="personNumber;enterpriseNumber"/>
									<xs:enumeration value="personNumber"/>
									<xs:enumeration value="enterpriseNumber"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="socialInsuranceFund" type="filter:boolean_authorize"/>
					<xs:element name="transferInformations" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
       =======================================
	   ==    EmploymentContractResponseFilterTypeV1   ==
       ======================================= -->
	<xs:complexType name="EmploymentContractResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="employer">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="EnterpriseNumber" type="filter:boolean_authorize"/>
								<xs:element name="NOSSRegistrationNbr" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="employee">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="INSS" type="filter:boolean_authorize"/>
								<xs:element name="DimonaName" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="period">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="DimonaPeriodId" type="filter:boolean_authorize"/>
								<xs:element name="Dates" type="filter:boolean_authorize"/>
								<xs:element name="ServiceType" type="filter:boolean_authorize"/>
								<xs:element name="NbrOfPlannedWorkingDay" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="features">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="JointCommissionNbr" type="filter:boolean_authorize"/>
								<xs:element name="WorkerType" type="filter:boolean_authorize"/>
								<xs:element name="UsingEmployer">
									<xs:complexType>
										<xs:sequence>
											<xs:element name="JointCommissionNbr" type="filter:boolean_authorize"/>
											<xs:element name="EnterpriseNumber" type="filter:boolean_authorize"/>
											<xs:element name="Name" type="filter:boolean_authorize"/>
											<xs:element name="NOSSRegistrationNbr" type="filter:boolean_authorize"/>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
								<xs:element name="SudEntityNbr" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="constructionCards" type="filter:boolean_authorize"/>
					<xs:element name="studentPlaceOfWork" type="filter:boolean_authorize"/>
					<xs:element name="IsCancelled" type="filter:boolean_authorize"/>
					<xs:element name="LastUpdateDate" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
       ===============================
	   ==    EnterpriseResponseFilterTypeV1   ==
       =============================== -->
	<xs:complexType name="EnterpriseResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="enterprise">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="EnterpriseNumber" type="filter:boolean_authorize"/>
								<xs:element name="NOSSRegistrationNbr" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="employee">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="number" type="filter:boolean_authorize"/>
								<xs:element name="type" type="filter:boolean_authorize"/>
								<xs:element name="juridicalForm" type="filter:boolean_authorize"/>
								<xs:element name="foreignBranchOffice" type="filter:boolean_authorize"/>
								<xs:element name="inscriptionDate" type="filter:boolean_authorize"/>
								<xs:element name="status" type="filter:boolean_authorize"/>
								<xs:element name="denomination" type="filter:boolean_authorize"/>
								<xs:element name="address" type="filter:boolean_authorize"/>
								<xs:element name="activity" type="filter:boolean_authorize"/>
								<xs:element name="function" type="filter:boolean_authorize"/>
								<xs:element name="linkedEnterprise" type="filter:boolean_authorize"/>
								<xs:element name="permission" type="filter:boolean_authorize"/>
								<xs:element name="validity" type="filter:boolean_authorize"/>
								<xs:element name="capital" type="filter:boolean_authorize"/>
								<xs:element name="currency" type="filter:boolean_authorize"/>
								<xs:element name="bankAccount" type="filter:boolean_authorize"/>
								<xs:element name="finances" type="filter:boolean_authorize"/>
								<xs:element name="externalIdentification" type="filter:boolean_authorize"/>
								<xs:element name="enterpriseFunctions" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="businessUnit">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="Number" type="filter:boolean_authorize"/>
								<xs:element name="Status" type="filter:boolean_authorize"/>
								<xs:element name="Denomination" type="filter:boolean_authorize"/>
								<xs:element name="Address" type="filter:boolean_authorize"/>
								<xs:element name="Activity" type="filter:boolean_authorize"/>
								<xs:element name="Function" type="filter:boolean_authorize"/>
								<xs:element name="LinkedEnterprise" type="filter:boolean_authorize"/>
								<xs:element name="Permission" type="filter:boolean_authorize"/>
								<xs:element name="Validity" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ===============================
	   ==    PersonResponseFilterTypeV2    ==
       =============================== -->
	<xs:complexType name="PersonResponseFilterTypeV2">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="ssin" type="filter:boolean_authorize" fixed="true"/>
					<xs:element name="name" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =============================
	   ==    FiliationResponseFilterTypeV1   ==
       ============================= -->
	<!--
	<xs:complexType name="FiliationResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="ascendantFiliation" type="filter:boolean_authorize"/>
					<xs:element name="descendantFiliation" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	-->
	<!-- 
       ======================================
	   ==    MobilityRegistrationResponseFilterTypeV1   ==
       ====================================== -->
	<xs:complexType name="MobilityRegistrationResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="baseItemToFilter" type="xs:string" fixed="items"/>
					<xs:element name="rules">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="titular.organisation.companyNr" type="filter:boolean_authorize"/>
								<xs:element name="titular.organisation.isLeaseCompany" type="filter:boolean_authorize"/>
								<xs:element name="titular.organisation.legalFormCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.organisation.name" type="filter:boolean_authorize"/>
								<xs:element name="titular.organisation.legalFormAbbrev" type="filter:boolean_authorize"/>
								<xs:element name="titular.person.nationalNr" type="filter:boolean_authorize"/>
								<xs:element name="titular.person.lastName" type="filter:boolean_authorize"/>
								<xs:element name="titular.person.firstName" type="filter:boolean_authorize"/>
								<xs:element name="titular.person.birthYear" type="filter:boolean_authorize"/>
								<xs:element name="titular.source" type="filter:boolean_authorize"/>
								<xs:element name="titular.type" type="filter:boolean_authorize"/>
								<xs:element name="titular.title" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.box" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.cityNisCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.cityName" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.country.code" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.country.description" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.postalCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.houseNumber" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.streetName" type="filter:boolean_authorize"/>
								<!-- N'est plus retournée voir mail de ICT Expose Data <ict.exposedata@mobilit.fgov.be> du 12/10/2021 12:16
								<xs:element name="titular.address.lastUpdateSource" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.lastUpdateDateTime" type="filter:boolean_authorize"/>
								-->
								<xs:element name="titular.registrationAddress.box" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.cityNisCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.cityName" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.country.code" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.country.description" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.postalCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.houseNumber" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.streetName" type="filter:boolean_authorize"/>
								<!-- N'est plus retournée voir mail de ICT Expose Data <ict.exposedata@mobilit.fgov.be> du 12/10/2021 12:16
								<xs:element name="titular.registrationAddress.lastUpdateSource" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.lastUpdateDateTime" type="filter:boolean_authorize"/>
								-->
								<xs:element name="vehicle.accidentDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.actualMassOfTheVehicle" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.assistanceWithoutPedallingIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.category.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.category.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.codeForBodyWork.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.codeForBodyWork.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.colour.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.colour.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.commercialName" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.counterType" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.creationDateTime" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.customsStickerCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.dateCOC" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.demolished.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.demolished.date" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.demolished.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.distanceType" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.exhaustDirectiveRefCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.firstKnownUseDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.firstRegistrationDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.handicapIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.importedCertificateCountryCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.importedCertificatePlateNumber" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.importedCertificateRegistrationDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.individualApprovalType" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.kind.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.kind.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.lastUpdateDateTime" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.limiterIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.loadWheelbaseRatio" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.makeDivCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.makeName" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.makeTypeDescription" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.massOfTheVehicleInRunningOrder" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.maxPermMassCombination" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.maxPermLadenMassNational" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.maximumSpeed" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nationalBuildup.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nationalBuildup.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nationalConfiguration.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nationalConfiguration.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nrOfSeatingPositions" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.numberOfAxles" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.numberOfStandingPlaces" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.offRoad" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.pvaBelgium" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.referenceMass" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.sellerCompanyCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.sizeHeight" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.sizeLength" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.sizeWidth" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.status.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.status.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.statusAdministrative.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.statusAdministrative.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.statusLegal.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.statusLegal.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.suspension.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.suspension.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.tachoIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.techControlEntryDatetime" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.techControlValidityDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.technicPermissibleMaxMass" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.type" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.typeApprovalType" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.unifier" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.variant" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.version" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.vin" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.wheelBase" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.wvta" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.electricEngineIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.engineCapacity" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.engineNumber" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.combinedCO2" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.combinedFuelConsumption" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.electricEnergyConsWeightedComb" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.electricRangeExternChargeable" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.euroNormCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.exhaustEmissionLevelEuro" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.maximumContinuousRatedPower" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.maximumNetPower" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.particulatesMassBenchTest" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.weightPowerRatio" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.weightedCombinedCO2" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.WLTPCombinedCO2" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.WLTPWeightedCombinedCO2" type="filter:boolean_authorize"/>
								<xs:element name="license.commercialMaxCapacity" type="filter:boolean_authorize"/>
								<xs:element name="license.commercialMaxMass" type="filter:boolean_authorize"/>
								<xs:element name="license.creationDateTime" type="filter:boolean_authorize"/>
								<xs:element name="license.expiryDate" type="filter:boolean_authorize"/>
								<xs:element name="license.firstRegistrationDateBelgium" type="filter:boolean_authorize"/>
								<xs:element name="license.languageCode" type="filter:boolean_authorize"/>
								<xs:element name="license.lastRegistrationDate" type="filter:boolean_authorize"/>
								<xs:element name="license.lastUpdateDateTime" type="filter:boolean_authorize"/>
								<xs:element name="license.plateNr" type="filter:boolean_authorize"/>
								<xs:element name="license.plateNrFormatted" type="filter:boolean_authorize"/>
								<xs:element name="license.plateType.code" type="filter:boolean_authorize"/>
								<xs:element name="license.plateType.description" type="filter:boolean_authorize"/>
								<xs:element name="license.plateUID" type="filter:boolean_authorize"/>
								<xs:element name="license.reRegistrationFlag" type="filter:boolean_authorize"/>
								<xs:element name="license.startSituationDate" type="filter:boolean_authorize"/>
								<xs:element name="license.status.beginDate" type="filter:boolean_authorize"/>
								<xs:element name="license.status.endDate" type="filter:boolean_authorize"/>
								<xs:element name="license.status.code" type="filter:boolean_authorize"/>
								<xs:element name="license.status.description" type="filter:boolean_authorize"/>
								<xs:element name="license.statusLegal.beginDate" type="filter:boolean_authorize"/>
								<xs:element name="license.statusLegal.endDate" type="filter:boolean_authorize"/>
								<xs:element name="license.statusLegal.code" type="filter:boolean_authorize"/>
								<xs:element name="license.statusLegal.description" type="filter:boolean_authorize"/>
								<xs:element name="transaction.UID" type="filter:boolean_authorize"/>
								<xs:element name="transaction.typeCode" type="filter:boolean_authorize"/>
								<xs:element name="transaction.subTypeCode.code" type="filter:boolean_authorize"/>
								<xs:element name="transaction.subTypeCode.description" type="filter:boolean_authorize"/>
								<xs:element name="transaction.dateTime" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.correctionType.code" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.correctionType.description" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.plateNumberPriorTitular" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.previousPlateNrTitular" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.newVehicle" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.secondHandVehicle" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.importedVehicle" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.transferAttest.code" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.transferAttest.description" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ======================================
	   ==    MobilityRegistrationsHistoryResponseFilterTypeV1   ==
       ====================================== -->
	<xs:complexType name="MobilityRegistrationsHistoryResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="baseItemToFilter" type="xs:string" fixed="items"/>
					<xs:element name="rules">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="titular.organisation.companyNr" type="filter:boolean_authorize"/>
								<xs:element name="titular.organisation.isLeaseCompany" type="filter:boolean_authorize"/>
								<xs:element name="titular.organisation.legalFormCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.organisation.name" type="filter:boolean_authorize"/>
								<xs:element name="titular.organisation.legalFormAbbrev" type="filter:boolean_authorize"/>
								<xs:element name="titular.person.nationalNr" type="filter:boolean_authorize"/>
								<xs:element name="titular.person.lastName" type="filter:boolean_authorize"/>
								<xs:element name="titular.person.firstName" type="filter:boolean_authorize"/>
								<xs:element name="titular.person.birthYear" type="filter:boolean_authorize"/>
								<xs:element name="titular.source" type="filter:boolean_authorize"/>
								<xs:element name="titular.type" type="filter:boolean_authorize"/>
								<xs:element name="titular.title" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.box" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.cityNisCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.cityName" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.country.code" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.country.description" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.postalCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.houseNumber" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.streetName" type="filter:boolean_authorize"/>
								<!-- N'est plus retournée voir mail de ICT Expose Data <ict.exposedata@mobilit.fgov.be> du 12/10/2021 12:16
								<xs:element name="titular.address.lastUpdateSource" type="filter:boolean_authorize"/>
								<xs:element name="titular.address.lastUpdateDateTime" type="filter:boolean_authorize"/>
								-->
								<xs:element name="titular.registrationAddress.box" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.cityNisCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.cityName" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.country.code" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.country.description" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.postalCode" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.houseNumber" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.streetName" type="filter:boolean_authorize"/>
								<!-- N'est plus retournée voir mail de ICT Expose Data <ict.exposedata@mobilit.fgov.be> du 12/10/2021 12:16
								<xs:element name="titular.registrationAddress.lastUpdateSource" type="filter:boolean_authorize"/>
								<xs:element name="titular.registrationAddress.lastUpdateDateTime" type="filter:boolean_authorize"/>
								-->
								<xs:element name="vehicle.accidentDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.actualMassOfTheVehicle" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.assistanceWithoutPedallingIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.category.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.category.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.codeForBodyWork.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.codeForBodyWork.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.colour.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.colour.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.commercialName" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.counterType" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.creationDateTime" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.customsStickerCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.dateCOC" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.demolished.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.demolished.date" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.demolished.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.distanceType" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.exhaustDirectiveRefCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.firstKnownUseDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.firstRegistrationDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.handicapIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.importedCertificateCountryCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.importedCertificatePlateNumber" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.importedCertificateRegistrationDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.individualApprovalType" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.kind.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.kind.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.lastUpdateDateTime" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.limiterIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.loadWheelbaseRatio" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.makeDivCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.makeName" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.makeTypeDescription" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.massOfTheVehicleInRunningOrder" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.maxPermMassCombination" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.maxPermLadenMassNational" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.maximumSpeed" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nationalBuildup.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nationalBuildup.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nationalConfiguration.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nationalConfiguration.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.nrOfSeatingPositions" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.numberOfAxles" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.numberOfStandingPlaces" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.offRoad" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.pvaBelgium" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.referenceMass" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.sellerCompanyCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.sizeHeight" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.sizeLength" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.sizeWidth" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.status.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.status.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.statusAdministrative.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.statusAdministrative.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.statusLegal.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.statusLegal.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.suspension.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.suspension.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.tachoIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.techControlEntryDatetime" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.techControlValidityDate" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.technicPermissibleMaxMass" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.type" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.typeApprovalType" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.unifier" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.variant" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.version" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.vin" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.wheelBase" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.wvta" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.electricEngineIndicator" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.engineCapacity" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.engineNumber" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.code" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.combinedCO2" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.combinedFuelConsumption" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.description" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.electricEnergyConsWeightedComb" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.electricRangeExternChargeable" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.euroNormCode" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.exhaustEmissionLevelEuro" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.maximumContinuousRatedPower" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.maximumNetPower" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.particulatesMassBenchTest" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.weightPowerRatio" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.weightedCombinedCO2" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.WLTPCombinedCO2" type="filter:boolean_authorize"/>
								<xs:element name="vehicle.engine.fuel.WLTPWeightedCombinedCO2" type="filter:boolean_authorize"/>
								<xs:element name="license.commercialMaxCapacity" type="filter:boolean_authorize"/>
								<xs:element name="license.commercialMaxMass" type="filter:boolean_authorize"/>
								<xs:element name="license.creationDateTime" type="filter:boolean_authorize"/>
								<xs:element name="license.expiryDate" type="filter:boolean_authorize"/>
								<xs:element name="license.firstRegistrationDateBelgium" type="filter:boolean_authorize"/>
								<xs:element name="license.languageCode" type="filter:boolean_authorize"/>
								<xs:element name="license.lastRegistrationDate" type="filter:boolean_authorize"/>
								<xs:element name="license.lastUpdateDateTime" type="filter:boolean_authorize"/>
								<xs:element name="license.plateNr" type="filter:boolean_authorize"/>
								<xs:element name="license.plateNrFormatted" type="filter:boolean_authorize"/>
								<xs:element name="license.plateType.code" type="filter:boolean_authorize"/>
								<xs:element name="license.plateType.description" type="filter:boolean_authorize"/>
								<xs:element name="license.plateUID" type="filter:boolean_authorize"/>
								<xs:element name="license.reRegistrationFlag" type="filter:boolean_authorize"/>
								<xs:element name="license.startSituationDate" type="filter:boolean_authorize"/>
								<xs:element name="license.status.beginDate" type="filter:boolean_authorize"/>
								<xs:element name="license.status.endDate" type="filter:boolean_authorize"/>
								<xs:element name="license.status.code" type="filter:boolean_authorize"/>
								<xs:element name="license.status.description" type="filter:boolean_authorize"/>
								<xs:element name="license.statusLegal.beginDate" type="filter:boolean_authorize"/>
								<xs:element name="license.statusLegal.endDate" type="filter:boolean_authorize"/>
								<xs:element name="license.statusLegal.code" type="filter:boolean_authorize"/>
								<xs:element name="license.statusLegal.description" type="filter:boolean_authorize"/>
								<xs:element name="transaction.UID" type="filter:boolean_authorize"/>
								<xs:element name="transaction.typeCode" type="filter:boolean_authorize"/>
								<xs:element name="transaction.subTypeCode.code" type="filter:boolean_authorize"/>
								<xs:element name="transaction.subTypeCode.description" type="filter:boolean_authorize"/>
								<xs:element name="transaction.dateTime" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.correctionType.code" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.correctionType.description" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.plateNumberPriorTitular" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.previousPlateNrTitular" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.newVehicle" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.secondHandVehicle" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.importedVehicle" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.transferAttest.code" type="filter:boolean_authorize"/>
								<xs:element name="transaction.info.transferAttest.description" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ======================================
	   ==    MovementIndicationResponseFilterTypeV1   ==
       ====================================== -->
	<xs:complexType name="MovementIndicationResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="baseItemToFilter" type="xs:string" fixed="items"/>
					<xs:element name="rules">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="objectKey.transactionUID" type="filter:boolean_authorize"/>
								<xs:element name="objectKey.plateUID" type="filter:boolean_authorize"/>
								<xs:element name="objectKey.plateNr" type="filter:boolean_authorize"/>
								<xs:element name="objectKey.vin" type="filter:boolean_authorize"/>
								<xs:element name="objectKey.unifier" type="filter:boolean_authorize"/>
								<xs:element name="transactionTypeCode" type="filter:boolean_authorize"/>
								<xs:element name="dateTime" type="filter:boolean_authorize"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       =============================
	   ==    PersonResponseFilterTypeV1   ==
       ============================= -->
	<xs:complexType name="PersonResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="ssin" type="filter:boolean_authorize"/>
					<xs:element name="name" type="filter:boolean_authorize"/>
					<xs:element name="gender" type="filter:boolean_authorize"/>
					<xs:element name="birthDate" type="filter:boolean_authorize"/>
					<xs:element name="birthPlace" type="filter:boolean_authorize"/>
					<xs:element name="nationality" type="filter:boolean_authorize"/>
					<xs:element name="nationalityAnonymization">
						<xs:annotation>
							<xs:documentation>Liste de nationalités séparées par un point virgule, sans espace. 
Une nationalité est représentée par deux caractères majuscules.
Quand la nationalité n'est pas dans la liste fournie, alors la nationalité retournée est anonymisée avec la valeur d'anonymisation spécifiée.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_anonymizeOther">
									<xs:pattern value="()|[A-Z]{2}(;[A-Z]{2})*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="address" type="filter:boolean_authorize"/>
					<xs:element name="addressPostalCodeRejection">
						<xs:annotation>
							<xs:documentation>Une erreur est retournée lorsque le code postal de l'adresse résidentielle n'est pas compris dans la liste d'intervales de codes postaux.
Si le champ est vide, ce filtrage n'est pas effectué.
Une spécification correcte de Liste d'Intervales de Codes Postaux se compose de un ou plusieurs Codes Postaux ou Intervales de Codes Postaux séparés par un ";".
Un Code Postal est un nombre entier de 4 digits.
Un Intervale de Code Postaux est représenté par deux Codes Postaux séparés par un "-". Les Codes Postaux spécifiés sont inclus dans l'intervale.

Exemples Valides:
- 5000
- 5000-5999
- 4000;5000-5999
- 3000;1500-1600;6050-7000;4000-5000;8888

Exemples Invalides:
- 500
- 5000-
- abc
- 2000 ; 1000 (espaces invalidant le pattern)
- 3000;1500-1600;6050-7000;4000-5000;888
</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:rangeList_errorOnOther">
									<xs:pattern value="()|\d{4}(-\d{4})?(;\d{4}(-\d{4})?)*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="addressPostalCodeRestriction">
						<xs:annotation>
							<xs:documentation>La signalétique est retournée lorsque le code postal de l'adresse résidentielle est compris dans la liste d'intervales de codes postaux.
Si le champ est vide, ce filtrage n'est pas effectué.
Une spécification correcte de Liste d'Intervales de Codes Postaux se compose de un ou plusieurs Codes Postaux ou Intervales de Codes Postaux séparés par un ";".
Un Code Postal est un nombre entier de 4 digits.
Un Intervale de Code Postaux est représenté par deux Codes Postaux séparés par un "-". Les Codes Postaux spécifiés sont inclus dans l'intervale.

Exemples Valides:
- 5000
- 5000-5999
- 4000;5000-5999
- 3000;1500-1600;6050-7000;4000-5000;8888

Exemples Invalides:
- 500
- 5000-
- abc
- 2000 ; 1000 (espaces invalidant le pattern)
- 3000;1500-1600;6050-7000;4000-5000;888
</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:rangeList_restrict">
									<xs:pattern value="()|\d{4}(-\d{4})?(;\d{4}(-\d{4})?)*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="addressOnAddressTypeRestriction">
						<xs:annotation>
							<xs:documentation>Liste de type d'adresses pouvant faire partie de la réponse, séparés par un point virgule, sans espace. 
Le type d'adresse peut être 'contact', 'diplomatic', 'post', 'reference', 'residential' ou 'temporary'.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_restrict">
									<!--xs:enumeration value=""/>
									<xs:enumeration value="contact"/>
									<xs:enumeration value="residential"/>
									<xs:enumeration value="professional"/>
									<xs:enumeration value="contact;residential"/>
									<xs:enumeration value="contact;professional"/>
									<xs:enumeration value="residential;professional"/>
									<xs:enumeration value="contact;residential;professional"/-->
									<!--xs:pattern value="(contact|residential|professional)(;(contact|residential|professional))*"/-->
									<xs:pattern value="()|(contact|diplomatic|post|reference|residential|temporary)(;(contact|diplomatic|post|reference|residential|temporary))*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="addressOnAddressTypeResidentialAnonymization">
						<xs:annotation>
							<xs:documentation>Spécifie la partie de l'adresse de résidence à anonymiser. 
Si le champ est vide, ce filtrage n'est pas effectué.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:value_anonymize">
									<xs:enumeration value=""/>
									<xs:enumeration value="municipality"/>
									<xs:enumeration value="postalCode"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="addressCountryRejection">
						<xs:annotation>
							<xs:documentation>Liste de pays autorisés. 
Quand le pays de l'addresse de résidence n'est pas un de ceux repris dans la liste une erreur est retournée. 
Une liste de pays est composée d'une suite de deux caractères majuscules séparés par un point virgule, sans espace.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_errorOnOther">
									<xs:pattern value="()|[A-Z]{2}(;[A-Z]{2})*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="deceaseDate" type="filter:boolean_authorize"/>
					<xs:element name="deceasePlace" type="filter:boolean_authorize"/>
					<xs:element name="civilState" type="filter:boolean_authorize"/>
					<xs:element name="legalCohabitation" type="filter:boolean_authorize"/>
					<xs:element name="diplomaticPost" type="filter:boolean_authorize"/>
					<xs:element name="administrator" type="filter:boolean_authorize"/>
					<xs:element name="photo" type="filter:boolean_authorize"/>
					<xs:element name="nobilityTitle" type="filter:boolean_authorize"/>
					<xs:element name="register" type="filter:boolean_authorize"/>
					<xs:element name="subregister" type="filter:boolean_authorize" fixed="true"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==================================
	   ==    PersonHistoryResponseFilterTypeV1   ==
       ================================== -->
	<xs:complexType name="PersonHistoryResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="residentialAddress" type="filter:boolean_authorize"/>
					<xs:element name="referenceAddress" type="filter:boolean_authorize"/>
					<xs:element name="diplomaticAddress" type="filter:boolean_authorize"/>
					<xs:element name="contactAddress" type="filter:boolean_authorize"/>
					<xs:element name="temporaryAddress" type="filter:boolean_authorize"/>
					<xs:element name="addressPostalCodeRestriction">
						<xs:annotation>
							<xs:documentation>La signalétique est retournée lorsque le code postal de l'adresse résidentielle est compris dans la liste d'intervales de codes postaux.
Si le champ est vide, ce filtrage n'est pas effectué.
Une spécification correcte de Liste d'Intervales de Codes Postaux se compose de un ou plusieurs Codes Postaux ou Intervales de Codes Postaux séparés par un ";".
Un Code Postal est un nombre entier de 4 digits.
Un Intervale de Code Postaux est représenté par deux Codes Postaux séparés par un "-". Les Codes Postaux spécifiés sont inclus dans l'intervale.

Exemples Valides:
- 5000
- 5000-5999
- 4000;5000-5999
- 3000;1500-1600;6050-7000;4000-5000;8888

Exemples Invalides:
- 500
- 5000-
- abc
- 2000 ; 1000 (espaces invalidant le pattern)
- 3000;1500-1600;6050-7000;4000-5000;888
</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:rangeList_restrict">
									<xs:pattern value="()|\d{4}(-\d{4})?(;\d{4}(-\d{4})?)*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="addressOnAddressTypeResidentialAnonymization">
						<xs:annotation>
							<xs:documentation>Spécifie la partie de l'adresse de résidence à anonymiser. 
Si le champ est vide, ce filtrage n'est pas effectué.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:value_anonymize">
									<xs:enumeration value=""/>
									<xs:enumeration value="municipality"/>
									<xs:enumeration value="postalCode"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<!--xs:element name="history" type="filter:boolean_authorize"/-->
					<xs:element name="historyPeriodRestriction" type="filter:duration_restrict"/>
					<xs:element name="historyMaxItemsRestriction" type="filter:number_restrict"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ==================================
	   ==    SelfEmployedResponseFilterTypeV1   ==
       ================================== -->
	<xs:complexType name="SelfEmployedResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="contributions" type="filter:boolean_authorize"/>
					<xs:element name="nisseReference" type="filter:boolean_authorize"/>
					<xs:element name="selfEmployed" type="filter:boolean_authorize"/>
					<xs:element name="socialInsuranceFundAffiliations" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ================================
	   ==    VehicleResponseFilterTypeV1   ==
       ================================ -->
	<xs:complexType name="VehicleResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="ssin" type="filter:boolean_authorize"/>
					<xs:element name="name" type="filter:boolean_authorize"/>
					<xs:element name="gender" type="filter:boolean_authorize"/>
					<xs:element name="birthDate" type="filter:boolean_authorize"/>
					<xs:element name="birthPlace" type="filter:boolean_authorize"/>
					<xs:element name="deceaseDate" type="filter:boolean_authorize"/>
					<xs:element name="deceasePlace" type="filter:boolean_authorize"/>
					<xs:element name="address" type="filter:boolean_authorize"/>
					<xs:element name="nationality" type="filter:boolean_authorize"/>
					<xs:element name="civilState" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ================================
	   ==    ExampleResponseFilterTypeV1   ==
       ================================ -->
	<xs:complexType name="ExampleResponseFilterTypeV1">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="history" type="filter:boolean_authorize"/>
					<xs:element name="historyPeriodRestriction" type="filter:duration_restrict"/>
					<xs:element name="historyMaxItems" type="filter:number_restrict"/>
					<xs:element name="maintenanceFlag" type="filter:boolean_authorize"/>
					<xs:element name="streetColor" type="filter:boolean_authorize"/>
					<xs:element name="nationalities" type="filter:boolean_authorize"/>
					<xs:element name="nationalitiesRestriction">
						<xs:annotation>
							<xs:documentation>Liste de nationalités séparées par un point virgule, sans espace. 
Une nationalité est représentée par deux caractères majuscules.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_restrict">
									<xs:pattern value="()|[A-Z]{2}(;[A-Z]{2})*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="nationalitiesAnonymization">
						<xs:annotation>
							<xs:documentation>Liste de nationalités séparées par un point virgule, sans espace. 
Une nationalité est représentée par deux caractères majuscules.
Quand la nationalité n'est pas dans la liste fournie, alors la nationalité retournée est anonymisée avec la valeur d'anonymisation fournie.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_anonymizeOther">
									<xs:pattern value="()|[A-Z]{2}(;[A-Z]{2})*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="bankAccount" type="filter:boolean_authorize"/>
					<xs:element name="bankAccountRestriction">
						<xs:annotation>
							<xs:documentation>Liste de compte bancaires belge au format IBAN séparés par un point virgule, sans espace.
ex: BE65091215036396;BE19091215027912;BE76091215036295</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_restrict">
									<xs:pattern value="BE\d{14}(;BE\d{14})*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="ssin" type="filter:boolean_authorize"/>
					<xs:element name="ssinAnonymization" type="filter:boolean_anonymize">
						<xs:annotation>
							<xs:documentation>Quand la valeur est mise à true, alors le SSIN encrypté est retourné dans l'élément 'cryptSsin' et l'élément 'ssin' n'est pas retourné.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="addresses" type="filter:boolean_authorize"/>
					<xs:element name="addressesTypeRestriction">
						<xs:annotation>
							<xs:documentation>Liste de type d'adresses pouvant faire partie de la réponse, séparés par un point virgule, sans espace. 
Le type d'adresse peut être 'contact', 'diplomatic', 'post', 'reference', 'residential' ou 'temporary'.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_restrict">
									<xs:pattern value="()|(contact|diplomatic|post|reference|residential|temporary)(;(contact|diplomatic|post|reference|residential|temporary))*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="addressesPostalCodeRestriction">
						<xs:annotation>
							<xs:documentation>Une spécification correcte de Liste d'Intervales de Codes Postaux se compose de un ou plusieurs Codes Postaux ou Intervales de Codes Postaux séparés par un ";".
Un Code Postal est un nombre entier de 4 digits.
Un Intervale de Code Postaux est représenté par deux Codes Postaux séparés par un "-". Les Codes Postaux spécifiés sont inclus dans l'intervale.

Exemples Valides:
- 5000
- 5000-5999
- 4000;5000-5999
- 3000;1500-1600;6050-7000;4000-5000;8888

Exemples Invalides:
- 500
- 5000-
- abc
- 2000 ; 1000 (espaces invalidant le pattern)
- 3000;1500-1600;6050-7000;4000-5000;888
</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:rangeList_restrict">
									<xs:pattern value="()|\d{4}(-\d{4})?(;\d{4}(-\d{4})?)*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="addressesPostalCodeAnonymization">
						<xs:annotation>
							<xs:documentation>Liste d'intervales de codes postaux pour lesquels une anonymisation de l'adresse ne doit pas être faite.
L'anonymisation consiste à retourner la valeur spécifiée pour les adresses dont le code postal n'est pas inclu dans la liste d'intervales.

Une spécification correcte de Liste d'Intervales de Codes Postaux se compose de un ou plusieurs Codes Postaux ou Intervales de Codes Postaux séparés par un ";".
Un Code Postal est un nombre entier de 4 digits.
Un Intervale de Code Postaux est représenté par deux Codes Postaux séparés par un "-". Les Codes Postaux spécifiés sont inclus dans l'intervale.

Exemples Valides:
- 5000
- 5000-5999
- 4000;5000-5999
- 3000;1500-1600;6050-7000;4000-5000;8888

Exemples Invalides:
- 500
- 5000-
- abc
- 2000 ; 1000 (espaces invalidant le pattern)
- 3000;1500-1600;6050-7000;4000-5000;888</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:rangeList_anonymizeOther">
									<xs:pattern value="()|\d{4}(-\d{4})?(;\d{4}(-\d{4})?)*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="country" type="filter:boolean_authorize"/>
					<xs:element name="countryReject">
						<xs:annotation>
							<xs:documentation>Liste de pays autorisés. 
Quand le pays n'est pas un de ceux repris dans la liste une erreur est retournée. 
Une liste de pays est composée d'une suite de deux caractères majuscules séparés par un point virgule, sans espace.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_errorOnOther">
									<xs:pattern value="()|[A-Z]{2}(;[A-Z]{2})*"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="region" type="filter:boolean_authorize"/>
					<xs:element name="regionReject">
						<xs:annotation>
							<xs:documentation>Quand la région ne correspond pas à celle indiquée, une erreur est retournée. 
Les régions reconnues sont listées dans l'énumération.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:value_errorOnOther">
									<xs:enumeration value=""/>
									<xs:enumeration value="Bruxelles-Capitale"/>
									<xs:enumeration value="Frandre"/>
									<xs:enumeration value="Wallonie"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="employerRegisterServiceProvider" type="filter:boolean_authorize"/>
					<xs:element name="employerRegisterServiceProviderRestriction">
						<xs:annotation>
							<xs:documentation>Le bloc ServiceProvider ne sera retourné que s'il est du type repris dans la liste.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:restriction base="filter:list_restrict">
									<xs:enumeration value=""/>
									<xs:enumeration value="personNumber;enterpriseNumber"/>
									<xs:enumeration value="personNumber"/>
									<xs:enumeration value="enterpriseNumber"/>
								</xs:restriction>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
       ================================
	   ==    ExampleResponseFilterTypeV2   ==
       ================================ -->
	<xs:complexType name="ExampleResponseFilterTypeV2">
		<xs:complexContent>
			<xs:extension base="filter:FilterType">
				<xs:sequence>
					<xs:element name="history" type="filter:boolean_authorize"/>
					<xs:element name="historyPeriodRestriction" type="filter:duration_restrict"/>
					<xs:element name="streetLength" type="filter:boolean_authorize"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
         ################################
         ###      Generic FilterTag types      ###
         ################################ -->
	<!--
		The type's name convention is type_action
		ex: boolean_authorize
		ex: value_authorize
		ex: list_restrict
	-->
	<!-- 
       ====================================
	   ==    FilterTag type           boolean_authorize   ==
       ==================================== -->
	<xs:complexType name="boolean_authorize">
		<xs:simpleContent>
			<xs:extension base="xs:boolean">
				<xs:attribute name="type" type="xs:string" use="required" fixed="boolean"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="authorize"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       ===================================
	   ==    FilterTag type           value_authorize    ==
       =================================== -->
	<xs:complexType name="value_authorize">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="type" type="xs:string" use="required" fixed="value"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="authorize"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       ==================================
	   ==    FilterTag type           value_restrict      ==
       ================================== -->
	<!-- Uses the filter:listRestrictedString defined in the "Other Types" section -->
	<xs:complexType name="value_restrict">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="type" type="xs:string" use="required" fixed="value"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="restrict"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       ==================================
	   ==    FilterTag type           list_restrict      ==
       ================================== -->
	<!-- Uses the filter:listRestrictedString defined in the "Other Types" section -->
	<xs:complexType name="list_restrict">
		<xs:simpleContent>
			<xs:extension base="filter:listRestrictedString">
				<xs:attribute name="type" type="xs:string" use="required" fixed="list"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="restrict"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       ==================================
	   ==    FilterTag type           rangeList_restrict      ==
       ================================== -->
	<!-- Uses the filter:rangeListRestrictedString defined in the "Other Types" section -->
	<xs:complexType name="rangeList_restrict">
		<xs:simpleContent>
			<xs:extension base="filter:rangeListRestrictedString">
				<xs:attribute name="type" type="xs:string" use="required" fixed="rangeList"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="restrict"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       =====================================
	   ==    FilterTag type           duration_restrict  ==
       ===================================== -->
	<xs:complexType name="duration_restrict">
		<xs:annotation>
			<xs:documentation>Exemple de durée de 5 ans au format xs:duration: P5Y</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="filter:duration-or-nothing">
				<xs:attribute name="type" type="xs:string" use="required" fixed="duration"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="restrict"/>
			</xs:extension>
		</xs:simpleContent>
		<!-- Will restrict the content of returned values based on the xs:duration value -->
	</xs:complexType>
	<!-- 
       =====================================
	   ==    FilterTag type           number_restrict  ==
       ===================================== -->
	<xs:complexType name="number_restrict">
		<xs:simpleContent>
			<xs:extension base="filter:integer-or-nothing">
				<xs:attribute name="type" type="xs:string" use="required" fixed="number"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="restrict"/>
			</xs:extension>
		</xs:simpleContent>
		<!-- Will restrict the content of returned values based on the xs:integer value -->
	</xs:complexType>
	<!-- 
       =====================================
	   ==    FilterTag type           value_errorOnOther   ==
       ===================================== -->
	<xs:complexType name="value_errorOnOther">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="type" type="xs:string" use="required" fixed="value"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="errorOnOther"/>
			</xs:extension>
		</xs:simpleContent>
		<!-- Will restrict the content of returned values based on the xs:string value -->
	</xs:complexType>
	<!-- 
       =====================================
	   ==    FilterTag type           list_errorOnOther  ==
       ===================================== -->
	<xs:complexType name="list_errorOnOther">
		<xs:simpleContent>
			<xs:extension base="filter:listRestrictedString">
				<xs:attribute name="type" type="xs:string" use="required" fixed="list"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="errorOnOther"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       =======================================
	   ==    FilterTag type           rangeList_errorOnOther  ==
       ======================================= -->
	<xs:complexType name="rangeList_errorOnOther">
		<xs:simpleContent>
			<xs:extension base="filter:rangeListRestrictedString">
				<xs:attribute name="type" type="xs:string" use="required" fixed="rangeList"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="errorOnOther"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       =====================================
	   ==    FilterTag type           boolean_anonymize  ==
       ===================================== -->
	<xs:complexType name="boolean_anonymize">
		<xs:simpleContent>
			<xs:extension base="xs:boolean">
				<xs:attribute name="type" type="xs:string" use="required" fixed="boolean"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="anonymize"/>
			</xs:extension>
		</xs:simpleContent>
		<!-- When true, the response MAY have "cryptElement" instead of "Element" 
          example: the response would have cryptPersonNumber instead of personNumber	-->
	</xs:complexType>
	<!-- 
       =====================================
	   ==    FilterTag type           value_anonymize  ==
       ===================================== -->
	<xs:complexType name="value_anonymize">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="type" type="xs:string" use="required" fixed="value"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="anonymize"/>
			</xs:extension>
		</xs:simpleContent>
		<!-- When true, the response MAY have "cryptElement" instead of "Element" 
          example: the response would have cryptPersonNumber instead of personNumber	-->
	</xs:complexType>
	<!-- 
       =================================
	   ==    FilterTag type           list_anonymize  ==
       ================================= -->
	<!-- Uses the filter:listRestrictedString defined in the "Other Types" section -->
	<xs:complexType name="list_anonymize">
		<xs:simpleContent>
			<xs:extension base="filter:listRestrictedString">
				<xs:attribute name="type" type="xs:string" use="required" fixed="list"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="anonymize"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       ======================================
	   ==    FilterTag type           rangeList_anonymize  ==
       ====================================== -->
	<!-- Uses the filter:listRestrictedString defined in the "Other Types" section -->
	<xs:complexType name="rangeList_anonymize">
		<xs:simpleContent>
			<xs:extension base="filter:rangeListRestrictedString">
				<xs:attribute name="type" type="xs:string" use="required" fixed="rangeList"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="anonymize"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- 
       =======================================
	   ==    FilterTag type           value_anonymizeOther  ==
       ======================================= -->
	<!-- Uses the filter:listRestrictedString defined in the "Other Types" section -->
	<xs:complexType name="value_anonymizeOther">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="type" type="xs:string" use="required" fixed="value"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="anonymizeOther"/>
				<xs:attribute name="anonymizedValue" type="xs:string" use="required"/>
			</xs:extension>
		</xs:simpleContent>
		<!-- When the value is not the one provided, then, the value is replaced by the anonymizedValue value -->
	</xs:complexType>
	<!-- 
       =====================================
	   ==    FilterTag type           list_anonymizeOther  ==
       ===================================== -->
	<!-- Uses the filter:listRestrictedString defined in the "Other Types" section -->
	<xs:complexType name="list_anonymizeOther">
		<xs:simpleContent>
			<xs:extension base="filter:listRestrictedString">
				<xs:attribute name="type" type="xs:string" use="required" fixed="list"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="anonymizeOther"/>
				<xs:attribute name="anonymizedValue" type="xs:string" use="required"/>
			</xs:extension>
		</xs:simpleContent>
		<!-- When the value is not in the provided list, then, the value is replaced by the anonymizedValue value -->
	</xs:complexType>
	<!-- 
       ==========================================
	   ==    FilterTag type           rangeList_anonymizeOther  ==
       ========================================== -->
	<!-- Uses the filter:rangeListRestrictedString defined in the "Other Types" section -->
	<xs:complexType name="rangeList_anonymizeOther">
		<xs:simpleContent>
			<xs:extension base="filter:rangeListRestrictedString">
				<xs:attribute name="type" type="xs:string" use="required" fixed="rangeList"/>
				<xs:attribute name="action" type="xs:string" use="required" fixed="anonymizeOther"/>
				<xs:attribute name="anonymizedValue" type="xs:string" use="required"/>
			</xs:extension>
		</xs:simpleContent>
		<!-- When the value is not in the provided list, then, the value is replaced by the anonymizedValue value -->
	</xs:complexType>
	<!-- 
         #######################
         ###      Other types      ###
         ####################### -->
	<!-- 
		complexTypes used by other definitions
		This should not need adaptations
	-->
	<xs:complexType name="FiltersType">
		<xs:attribute name="exposedDataGroup" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:whiteSpace value="collapse"/>
					<xs:minLength value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:assert test="every $x in filter satisfies 
                             (empty($x/preceding-sibling::*) or 
                             (compare(upper-case(concat($x/@type, ':',$x/@targetDataGroup)), upper-case(concat($x/preceding-sibling::*[1]/@type, ':', $x/preceding-sibling::*[1]/@targetDataGroup))) ge 0))">
			<xs:annotation>
				<xs:documentation>
					Cette assertion technique force les éléments 'filter' à être placés par ordre alphabétique de type puis de targetDataGroup.
					Cette assertion a pour but d'interdire la duplication de filtres techniquement identiques mais représentés par des XML différents.
				</xs:documentation>
			</xs:annotation>
		</xs:assert>
	</xs:complexType>
	<xs:complexType name="FilterType">
		<xs:attribute name="type" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="REQUEST"/>
					<xs:enumeration value="RESPONSE"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="targetDataGroup" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:whiteSpace value="collapse"/>
					<xs:minLength value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:simpleType name="listRestrictedString">
		<xs:restriction base="xs:string">
			<xs:pattern value="()|[^;\s]+(;[^;\s]+)*"/>
			<!-- toto;foo;bar;123 -->
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="rangeListRestrictedString">
		<xs:restriction base="xs:string">
			<xs:pattern value="()|[^-;\s]+(-[^-;\s]+)?(;[^-;\s]+(-[^-;\s]+)?)*"/>
			<!-- toto-tata;foo;bar-456;123 -->
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="empty-string">
		<xs:restriction base="xs:string">
			<xs:enumeration value=""/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="duration-or-nothing">
		<xs:union memberTypes="xs:duration filter:empty-string"/>
	</xs:simpleType>
	<xs:simpleType name="integer-or-nothing">
		<xs:union memberTypes="xs:integer filter:empty-string"/>
	</xs:simpleType>
</xs:schema>
